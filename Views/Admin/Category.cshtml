
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}
<style>
    
    input[type="file"] {
        color: transparent;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.2/dist/xlsx.full.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<body class="body">
    
        <span>CATEGORY LIST</span>


    <b class="float-end">
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
            Add category
        </button>
        <button class="btn btn-success"  id="download">Download Excel</button>
        <button for="execlupload" onclick="uploadFile()" class="btn btn-danger">
            Upload
        </button>

        <input type="file"  id="file" name="file" required style="width:100px">
        

    </b>
    <div id="DivPrtCategoryList">
    </div>
    <div class="container mt-5">
        <!-- The Modal -->
        <div class="modal fade" id="myModal" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">
                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h5 class="modal-title">Add Category</h5>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">
                        <form id="categoryForm">
                            <input type="text" id="hdnCategoryId" hidden />
                            <div class="form-group">
                                <label for="Category">Category Name</label>
                                <input type="text" id="Category" class="form-control" placeholder="Enter the Category name" />
                            </div>
                            <div class="form-group">
                                <label for="check">IsActive</label>
                                <input type="checkbox" id="check" checked />
                            </div>
                        </form>
                    </div>
                    
                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success" id="btn">Submit</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
   
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.2/dist/xlsx.full.min.js"></script>
    <script>
        $(function () {
            $('input[type="file"]').change(function () 
            {
                if ($(this).val() != "") 
                {
                    $(this).css('display', 'block');
                } else 
                {
                    $(this).css('color', 'red');
                }
            });
        })
        $("#download").click(function () {
            var result = confirm("Are u sure want to download ");
            if (result) {
                downloadExcel()
            }
        })
        function downloadExcel() {
            
            var data = [
                ["CategoeryName", "IsActive"],

            ];
            var workbook = XLSX.utils.book_new();
            var sheet = XLSX.utils.aoa_to_sheet(data);
            XLSX.utils.book_append_sheet(workbook, sheet, "Sheet1");
            var wbout = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
            var blob = new Blob([wbout], { type: "application/octet-stream" });
            var downloadLink = document.createElement("a");
            var url = URL.createObjectURL(blob);

            downloadLink.href = url;
            downloadLink.download = "SampleExcelFile.xlsx"; // File name
            document.body.appendChild(downloadLink);
            downloadLink.click();

            setTimeout(function () {
                document.body.removeChild(downloadLink);
                window.URL.revokeObjectURL(url);
            }, 0);
        }
        $(document).ready(function () {
            GetCategoryList();
            $('#btn').click(function () {
                try {
                    var formIsValid = true;
                    var categoryName = $('#Category').val();
                    if (!categoryName) {
                        formIsValid = false;
                        $('#Category').css('border', '1px solid red');
                    }

                    if (formIsValid) {
                        AddOrUpdateCategory();

                        setTimeout(function () {
                            $("#btn").text("Submit");
                            $('#Category').css('border', '');
                            $('#hdnCategoryId').val('');
                            $('#Category').val('');
                            $('.modal-title').text('Add category');
                            $("#check").prop("checked", true);
                        }, 500); // 500ms delay before executing the changes
                    }
                } catch (error) {
                    console.log(error);
                }

            });
            $('.modal .close, .modal-footer .btn-danger').click(function () {
                try {
                    setTimeout(function () {
                        $('#myModal').modal('hide').on('hidden.bs.modal', function () {
                            $('#hdnCategoryId').val('');
                            $('#Category').val('');
                            $("#check").prop("checked", true);
                            $('.modal-title').text('Add category');
                            $("#btn").text("Submit");
                            $('#Category').css('border', '');
                            afterModalHidden();
                        });
                        $('#hdnCategoryId').val('');
                        $('#Category').val('');
                        $("#check").prop("checked", true);
                        $('.modal-title').text('Add category');
                        $("#btn").text("Submit");
                        $('#Category').css('border', '');
                    }, 500); // 500ms delay before executing the changes
                } catch (error) {
                    console.log(error);
                }
            });
        });

        function GetCategoryList() {
            try {
                $.ajax({
                    url: '/Admin/PrtCategoryList',
                    type: 'GET',
                    success: function (response) {
                        $("#DivPrtCategoryList").html(response);
                    },
                    error: function () {
                        // Handle error if needed
                    }
                });
            } catch (error) {
                console.log(error);
            }
        }

        function AddOrUpdateCategory() {
            try {
                var categoryName = $.trim($('#Category').val());
                var isActive = $("#check").prop("checked");
                var categoryId = $('#hdnCategoryId').val();
                var obj = {
                    CategoryName: categoryName,
                    IsActive: isActive,
                    CategoryId: categoryId
                };
                $.ajax({
                    url: '/Admin/AddOrUpdateCategory',
                    type: 'POST',
                    data: obj,
                    success: function (res) {
                        try {
                            var statusCode = res.status;
                            var message = res.message;
                            debugger;
                            if (statusCode == 1) {
                                Swal.fire({
                                    icon: "success",
                                    title: message,
                                    text: 'Thank you',
                                    timer: 5000,
                                    showConfirmButton: true,
                                    showCloseButton: true,
                                    showCancelButton: true,
                                    timerProgressBar: true
                                });
                                $("#myModal .close").click()
                                GetCategoryList();
                            }

                            if (statusCode == -1) {
                                Swal.fire({
                                    icon: "error",
                                    title: message,
                                    text: ' sorry ',
                                    timer: 5000,
                                    showConfirmButton: true,
                                    showCloseButton: true,
                                    showCancelButton: true,
                                    timerProgressBar: true
                                });
                                GetCategoryList();
                                $('#myModal').trigger('click');
                                $('#myModal').modal('hide');
                            }
                        } catch (error) {
                            console.log(error);
                        }
                    }
                });
            } catch (error) {
                console.log(error);
            }
        }

        function DeleteCategory(CategoryID) {
            try {
                $.ajax({
                    url: '/Admin/DeleteCategory',
                    type: 'GET',
                    data: { CategoryID: CategoryID },
                    success: function (res) {
                        debugger;
                        if (res == "") {
                            Swal.fire({
                                icon: "success",
                                title: 'Data Deleted Successfully',
                                text: 'Thank you',
                                timer: 5000,
                                showConfirmButton: true,
                                showCloseButton: true,
                                showCancelButton: true,
                                timerProgressBar: true
                            });
                            GetCategoryList();
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: res,
                                text: 'sorry',
                                timer: 5000,
                                showConfirmButton: true,
                                showCloseButton: true,
                                showCancelButton: true,
                                timerProgressBar: true
                            });
                        }
                    }
                });
            } catch (error) {
                console.log(error);
            }
        }

        function GetCategoryById(categoryID) {
            try {
                $.ajax({
                    url: '/Admin/GetCategoryById',
                    type: 'GET',
                    data: { CategoryID: categoryID },
                    success: function (res) {
                        try {
                            for (var x of res) {
                                var value = $.trim(x.categoryName);

                                $("#Category").val(value);
                                $("#hdnCategoryId").val(x.categoryId);
                                $("#check").prop("checked", x.isActive);
                                $('.modal-title').text('Update category');
                                $("#btn").text("Update");
                            }
                        } catch (error) {
                            console.log(error);
                        }
                    }
                });
            } catch (error) {
                console.log(error);
            }
        }

       
        function alphabetOnly(event) {
            var inputElement = event.target;
            var value = inputElement.value;
            inputElement.value = value.replace(/[^A-Za-z\s]+/g, '').replace(/\s+/g, ' ');
            var isValid = /^[A-Za-z\s]+$/.test(inputElement.value);
            // Assuming you want to do something with isValid, like validation
            console.log(isValid); // Example: Log the validation result
        }

        // Assuming you have input elements with id="vendor_Name"
        var inputElements = document.querySelectorAll("#Category"); // Use querySelectorAll for ID selector
        inputElements.forEach(function (inputElement) {
            inputElement.addEventListener("input", alphabetOnly);
        });
        function uploadFile() {
            var formData = new FormData();
            var file = $('#file')[0].files[0];

            formData.append('file', file); 

            $.ajax({
                type: "POST",
                url: "/admin/Upload", 
                data: formData,
                processData: false,
                contentType: false,
                success: function (res) {
                   
                    // Handle success response here
                  alert('File uploaded successfully')
                           GetCategoryList();
                },
                error: function (errResponse) {
                    // Handle error response here
                    console.error('Error uploading file:', errResponse);
                }
            });
        }


    </script>
</body>






























@* 
                 //public IActionResult GetProductList()
        //{
        //    try
        //    {
        //        IEnumerable<Product>
    product = _hr.GetProductList();
    //        return Json(product);
    //    }
    //    catch(Exception ex)
    //    {
    //        return Json(ex.Message);
    //    }
    //}

    //[HttpPost]
    //public IActionResult Product(Product product, IFormFile file)
    //{
    //    if (file != null && file.Length > 0)
    //    {
    //        string filename = Guid.NewGuid().ToString() + "_" + Path.GetFileName(file.FileName);
    //        string filepath = Path.Combine(hostingEnvironment.WebRootPath, "Images", filename);
    //        using (var stream = new FileStream(filepath, FileMode.Create))
    //        {
    //           file.CopyTo(stream);
    //        }
    //        product.ProductImage=filename;
    //    }
    //    var Product = _hr.AddOrUpdateProduct(product);
    //    return View(Product);

    // In your Product action
    //[HttpPost]

    //public async Task<IActionResult>
        Product( Product product, IFormFile file) // Use [FromBody] for JSON data
        //{
        //    try
        //    {
        //        if (product == null) // Check if product is null
        //        {
        //            return BadRequest("Missing product data in request body.");
        //        }

        //        string responseContent;
        //        using (var fileStream = file != null ? file.OpenReadStream() : null)
        //        {
        //            responseContent = await ShopingCart.Utility.ExecuteHttpRequests(
        //                HttpMethod.Post,
        //                "http://localhost:5152/api/App/Product",
        //                product,
        //                fileStream,
        //                file?.FileName);
        //        }

        //        // Deserialize response JSON (assuming the response is JSON)
        //        var jsonResponse = JsonConvert.DeserializeObject<Response>
            (responseContent);

            //        return Json(jsonResponse);
            //    }
            //    catch (Exception ex)
            //    {
            //        Console.WriteLine(ex.Message);
            //        return StatusCode(500, "An error occurred while processing your request.");
            //    }
            //}
            //[HttpPost]
            //[HttpPost]
            //public IActionResult Product(Product product, IFormFile file)
            //{
            //    try
            //    {


            //        string responseContent;
            //        using (var fileStream = file?.OpenReadStream())
            //        {
            //            responseContent = Utility.ExecuteHttpRequests("http://localhost:5152/api/App/Product", product, file);
            //        }

            //        // Handle the response as needed
            //        // For example, deserialize the response JSON if it's JSON
            //        var jsonResponse = JsonConvert.DeserializeObject<Response>
                (responseContent);

                //        return Json(jsonResponse);
                //    }
                //    catch (Exception ex)
                //    {
                //        Console.WriteLine(ex.Message);
                //        return StatusCode(500, "An error occurred while processing your request.");
                //    }
                //}
                 //     public IActionResult product([FromForm] Product product, IFormFile file)
        //     {
        //         string apiUrl = apiBaseUrl + "api/App/Product";

        //         try
        //         {
        //             using (var client = new HttpClient())
        //             {
        //                 var formData = new MultipartFormDataContent();

        //                 // Add product properties as string content with null checks
        //                 if (product.Id != null)
        //                     formData.Add(new StringContent(product.Id.ToString()), "id");
        //                 if (!string.IsNullOrEmpty(product.ProductName))
        //                     formData.Add(new StringContent(product.ProductName), "productName");
        //                 if (product.ProductPrice != null)
        //                     formData.Add(new StringContent(product.ProductPrice.ToString()), "productPrice");
        //                 if (!string.IsNullOrEmpty(product.productDescription))
        //                     formData.Add(new StringContent(product.productDescription), "productDescription");
        //                 if (product.CategoryId != null)
        //                     formData.Add(new StringContent(product.CategoryId.ToString()), "categoryId");
        //                 if (!string.IsNullOrEmpty(product.CategoryName))
        //                     formData.Add(new StringContent(product.CategoryName), "categoryName");
        //                 if (product.IsActive != null)
        //                     formData.Add(new StringContent(product.IsActive.ToString()), "isActive");

        //                 if (file != null)
        //                 {
        //                     var fileStreamContent = new StreamContent(file.OpenReadStream());
        //                     fileStreamContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        //                     {
        //                         Name = "file",
        //                         FileName = file.FileName
        //                     };
        //                     fileStreamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
        //                     formData.Add(fileStreamContent);
        //                 }

        //                 // Execute HTTP request using ApiService
        //string responseContent = ApiService.ExecuteHttpRequestss(HttpMethod.Post, apiUrl, formData: formData);

        //                 // Deserialize response JSON
        //                 var jsonResponse = JsonConvert.DeserializeObject<Response>(responseContent);

        //                 return Json(jsonResponse);
        //             }
        //         }
        //         catch (Exception ex)
        //         {
        //             Console.WriteLine("An error occurred: " + ex.Message);
        //             return StatusCode(500, new { error = "An error occurred while processing your request." });
        //         }
        //     }
        function AddOrUpdateProductData()
    {
        var id = $("#hdnprodductid").val();

        if (id == 0) {
            // Validate only if id is 0
            if (!ValidationAll()) {
                return false;
            }
        }

            var activevalue = $("#isactive").is(":checked") ? "true" : "false";
            var formData = new FormData();
            formData.append('Id', $("#hdnprodductid").val());
            formData.append('CategoryId', $("#category").val());
            formData.append('ProductName', $("#product").val());
            formData.append('ProductPrice', $("#productprice").val());
            formData.append('ProductDesc', CKEDITOR.instances['productdesc'].getData());

            formData.append('IsActive', activevalue);

            if ($("#productpic").get(0).files.length > 0) {
                var pic = $("#productpic").get(0).files[0];
                formData.append('file', pic);
            }

            $.ajax({
                url: '/admin/addOrUpdateProduct',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (res) {
                    debugger;
                    var statusCode = res.statuscode;
                    var message = res.message;

                    if (statusCode == 1) {
                        Swal.fire({
                            icon: "success",
                            title: message,
                            text: 'Thank you',
                            confirmButtonText: 'OK',
                            timer: 5000,
                            showConfirmButton: true,
                            showCloseButton: true,
                            showCancelButton: true,
                            timerProgressBar: true
                        });
                    }
                    else {
                        Swal.fire({
                            icon: "success",
                            title: message,
                            text: 'Thank you',
                            confirmButtonText: 'OK',
                            timer: 5000,
                            showConfirmButton: true,
                            showCloseButton: true,
                            showCancelButton: true,
                            timerProgressBar: true
                        });
                    }
                    $("#myModal").trigger('click');
                    $('#myModal').modal('hide');
                    GetProductList();
                }
            });

    }
        
        *@
@*
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<!-- Popper.js -->
<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>

<!-- Bootstrap -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- CKEditor -->
<script src="https://cdn.ckeditor.com/4.16.0/standard/ckeditor.js"></script>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> *@